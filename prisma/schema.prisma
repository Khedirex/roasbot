generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

/**
 * =========================
 * AutenticaÃ§Ã£o / UsuÃ¡rios
 * =========================
 */
model User {
  id        String   @id @default(cuid())
  name      String?
  email     String   @unique
  password  String // hash (bcryptjs)
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([role, createdAt])
}

/**
 * =========================
 * Ingest de eventos crus
 * =========================
 */
model IngestEvent {
  id        String   @id @default(cuid())
  game      String // ex: "aviator"
  casa      String // ex: "1win"
  value     Float
  ts        BigInt // epoch ms
  ip        String?
  userAgent String?
  createdAt DateTime @default(now())

  @@index([game, casa, createdAt])
  @@index([game, casa, ts])
}

/**
 * =========================
 * Sinais brutos de Aviator
 * =========================
 */
model AviatorSignal {
  id        Int       @id @default(autoincrement())
  casa      String
  rule      String // "spike" | "drawdown" | ...
  value     Float
  ts        BigInt
  payload   Json?
  status    String // "pending" | "sent" | "skipped"
  sentAt    DateTime?
  createdAt DateTime  @default(now())

  @@index([casa, ts])
}

/**
 * =========================
 * Estado global por casa
 * =========================
 */
model RobotState {
  id              Int      @id @default(autoincrement())
  casa            String   @unique
  lastProcessedTs BigInt   @default(0)
  updatedAt       DateTime @updatedAt
}

/**
 * =========================
 * ROBOT / STRATEGY
 * =========================
 */
model Robot {
  id        String   @id @default(cuid())
  game      String
  casa      String
  name      String
  botToken  String?
  chatId    String?
  enabled   Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  strategies    Strategy[]
  // ðŸ‘‡ relaÃ§Ã£o inversa pedida pelo Prisma (Robot 1 â€” N SignalCursor)
  signalCursors SignalCursor[]

  @@index([game, casa])
  @@index([enabled, updatedAt])
}

model Strategy {
  id        String  @id @default(cuid())
  robotId   String
  name      String
  active    Boolean @default(true)
  startHour String
  endHour   String
  pattern   Json

  winAt         Int      @default(1)
  mgCount       Int      @default(0)
  blueThreshold Float?
  pinkThreshold Float?
  messages      Json?
  enabled       Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  robot Robot @relation(fields: [robotId], references: [id], onDelete: Cascade)

  // ðŸ‘‡ relaÃ§Ã£o inversa pedida pelo Prisma (Strategy 1 â€” 1 StrategyState; aqui como 1â€”N para ficar flexÃ­vel)
  strategyStates StrategyState[]

  @@index([robotId, active])
  @@index([startHour, endHour])
}

model SignalCursor {
  id        String   @id @default(cuid())
  robotId   String
  // ðŸ‘‡ mantÃ©m a relaÃ§Ã£o explÃ­cita
  robot     Robot    @relation(fields: [robotId], references: [id], onDelete: Cascade)
  lastTs    BigInt   @default(0)
  lastId    String?
  updatedAt DateTime @updatedAt

  @@unique([robotId])
  @@index([lastTs, updatedAt])
}

model StrategyState {
  id         String   @id @default(cuid())
  strategyId String
  // ðŸ‘‡ mantÃ©m a relaÃ§Ã£o explÃ­cita
  strategy   Strategy @relation(fields: [strategyId], references: [id], onDelete: Cascade)
  tail       Int      @default(0)
  lastTs     BigInt   @default(0)
  updatedAt  DateTime @updatedAt

  @@unique([strategyId])
}

/**
 * =========================
 * Destinos / Logs Telegram
 * =========================
 */
model TelegramTarget {
  id        String   @id @default(cuid())
  game      String   @default("aviator") // <â€” agora obrigatÃ³rio
  casa      String
  kind      String // "win" | "loss" | "entry" | ...
  botToken  String?
  chatId    String?  // <- atributo de campo OK
  active    Boolean  @default(true)
  templates Json? // { win?: string, loss?: string, entry?: string }
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([game, casa, kind], map: "telegram_target_game_casa_kind_uq")
  @@index([chatId])
}

model TelegramLog {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  casa     String
  kind     String
  chatId   String
  ok       Boolean
  payload  Json
  response Json

  @@index([casa, kind, createdAt])
}

/**
 * =========================
 * Cursores / Estados
 * =========================
 */

/// Log leve p/ deduplicar disparos (PRE/CONFIRM) por evento+estratÃ©gia.
model SignalDispatch {
  id         String   @id @default(cuid())
  robotId    String
  strategyId String
  kind       String // "pre" | "confirm"
  tail       Int
  eventId    String // IngestEvent.id
  dedupeKey  String   @unique
  createdAt  DateTime @default(now())

  @@index([robotId, strategyId, createdAt])
}
