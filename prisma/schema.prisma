generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id        String   @id @default(cuid())
  name      String?
  email     String   @unique
  password  String // hash (bcryptjs)
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([role, createdAt])
}

model IngestEvent {
  id        String   @id @default(cuid())
  game      String // ex: "aviator"
  casa      String // ex: "1win"
  value     Float
  ts        BigInt // timestamp do evento (epoch ms)
  ip        String? // opcional, IP de origem
  userAgent String? // opcional, user-agent
  createdAt DateTime @default(now()) // momento de inserção

  @@index([game, casa, createdAt])
  @@index([game, casa, ts])
}

model AviatorSignal {
  id        Int       @id @default(autoincrement())
  casa      String
  rule      String // ex.: "spike" | "drawdown"
  value     Float
  ts        BigInt // timestamp (ms) do ponto que gerou o sinal
  payload   Json?
  status    String // "pending" | "sent" | "skipped"
  sentAt    DateTime?
  createdAt DateTime  @default(now())

  @@index([casa, ts])
}

model RobotState {
  id              Int      @id @default(autoincrement())
  casa            String   @unique
  lastProcessedTs BigInt   @default(0) // último ts de ingest processado
  updatedAt       DateTime @updatedAt
}

/**
 * =========================
 * NOVOS MODELOS P/ ESTRATÉGIAS
 * =========================
 */

model Robot {
  id        String   @id @default(cuid())
  game      String // "aviator" | "bacbo" (livre p/ agora)
  casa      String // "1win" | "lebull" | etc.
  name      String
  botToken  String? // Telegram Bot token (opcional)
  chatId    String? // Telegram Chat ID  (opcional)
  enabled   Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  strategies Strategy[]

  @@index([game, casa])
  @@index([enabled, updatedAt])
}

model Strategy {
  id        String  @id @default(cuid())
  robotId   String
  name      String
  active    Boolean @default(true)
  startHour String // "HH:mm"
  endHour   String // "HH:mm"

  // ⬇️ SQLite não suporta lista de primitivos; use Json
  pattern Json // ex.: ["gray","green","black","white","blue","pink"]

  winAt         Int      @default(1)
  mgCount       Int      @default(0)
  blueThreshold Float? // Azul: vela >= blueThreshold
  pinkThreshold Float? // Rosa: vela <= pinkThreshold
  messages      Json? // textos configuráveis da StrategyMessagesForm
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  robot Robot @relation(fields: [robotId], references: [id], onDelete: Cascade)

  @@index([robotId, active])
  @@index([startHour, endHour])
}
