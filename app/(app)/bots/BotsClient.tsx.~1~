// roasbot/roasbot-main/app/bots/BotsClient.tsx
"use client";

import { useEffect, useMemo, useState } from "react";
import { useRouter } from "next/navigation";
import RobotManager from "@/components/RobotManager";

// Tipos base para os selects
type Casa = { label: string; slug: string };
type Game = { id: string; label: string; basePath: string; casas: Casa[] };

// üëâ CasaSlug ‚Äúoficial‚Äù extra√≠do das props do RobotManager
type CasaSlug = React.ComponentProps<typeof RobotManager>["casa"];

// Casas v√°lidas para AVIATOR conforme o RobotManager
const AVIATOR_CASAS: readonly CasaSlug[] = ["1win", "lebull"] as const;
const isCasaAviator = (x: string): x is CasaSlug =>
  (AVIATOR_CASAS as readonly string[]).includes(x);

// Fonte de verdade para os selects
const GAMES: Game[] = [
  {
    id: "aviator",
    label: "Aviator",
    basePath: "/bots/aviator",
    casas: [
      { label: "1Win", slug: "1win" },
      { label: "LeBull", slug: "lebull" },
    ],
  },
  {
    id: "bacbo",
    label: "Bac Bo",
    basePath: "/bots/bacbo",
    casas: [
      { label: "Stake", slug: "stake" },
      { label: "Bet365", slug: "bet365" },
    ],
  },
  {
    id: "mines",
    label: "Mines",
    basePath: "/bots/mines",
    casas: [{ label: "1Win", slug: "1win" }],
  },
  {
    id: "roleta",
    label: "Roleta",
    basePath: "/bots/roleta",
    casas: [{ label: "LeBull", slug: "lebull" }],
  },
];

export default function BotsClient({
  initialGame = "",
  initialCasa = "",
}: {
  initialGame?: string;
  initialCasa?: string;
}) {
  const router = useRouter();
  const [gameId, setGameId] = useState<string>(initialGame);
  const [casaSlug, setCasaSlug] = useState<string>(initialCasa);

  // valida game
  useEffect(() => {
    if (!GAMES.some((x) => x.id === gameId)) setGameId("");
  }, [gameId]);

  const selectedGame = useMemo(
    () => GAMES.find((g) => g.id === gameId) || null,
    [gameId]
  );

  // valida casa
  useEffect(() => {
    if (!selectedGame) {
      setCasaSlug("");
      return;
    }
    if (!selectedGame.casas.some((c) => c.slug === casaSlug)) {
      setCasaSlug("");
    }
  }, [selectedGame, casaSlug]);

  // sincroniza com URL
  useEffect(() => {
    const params = new URLSearchParams();
    if (gameId) params.set("game", gameId);
    if (casaSlug) params.set("casa", casaSlug);
    router.replace(params.toString() ? `/bots?${params}` : "/bots");
  }, [gameId, casaSlug, router]);

  return (
    <div className="p-6 max-w-5xl">
      <h1 className="text-2xl font-bold mb-6">Configurar Bots</h1>

      {/* Seletores */}
      <div className="grid md:grid-cols-3 gap-6">
        <div>
          <label className="block text-sm font-medium mb-2">Jogo</label>
          <select
            value={gameId}
            onChange={(e) => setGameId(e.target.value)}
            className="w-full rounded-lg border px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            <option value="" disabled>Selecione um jogo‚Ä¶</option>
            {GAMES.map((g) => (
              <option key={g.id} value={g.id}>{g.label}</option>
            ))}
          </select>
        </div>

        <div>
          <label className="block text-sm font-medium mb-2">Casa</label>
          <select
            value={casaSlug}
            onChange={(e) => setCasaSlug(e.target.value)}
            disabled={!selectedGame}
            className={`w-full rounded-lg border px-3 py-2 ${
              !selectedGame ? "bg-gray-100 text-gray-400" : ""
            } focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:cursor-not-allowed`}
          >
            <option value="" disabled>
              {selectedGame ? "Selecione a casa‚Ä¶" : "Escolha um jogo primeiro‚Ä¶"}
            </option>
            {selectedGame?.casas.map((c) => (
              <option key={c.slug} value={c.slug}>{c.label}</option>
            ))}
          </select>
        </div>
      </div>

      {/* Conte√∫do */}
      <section className="mt-8">
        {!selectedGame && (
          <p className="text-gray-500">Escolha um <b>jogo</b> para habilitar as op√ß√µes de casa.</p>
        )}
        {selectedGame && !casaSlug && (
          <p className="text-gray-500">Agora selecione a <b>casa</b> para ver as configura√ß√µes.</p>
        )}

        {/* Renderiza RobotManager somente quando for Aviator e a casa √© v√°lida de acordo com o tipo do componente */}
        {selectedGame?.id === "aviator" && isCasaAviator(casaSlug) && (
          <RobotManager
            key={`${selectedGame.id}-${casaSlug}`}
            botId={selectedGame.id}
            casa={casaSlug} // agora tipa exatamente como o RobotManager espera
          />
        )}

        {/* Placeholder para jogos ainda n√£o mapeados */}
        {selectedGame && selectedGame.id !== "aviator" && casaSlug && (
          <div className="text-sm text-amber-600 mt-4">
            Em breve: painel para <b>{selectedGame.label}</b> na casa{" "}
            <b>{selectedGame.casas.find((c) => c.slug === casaSlug)?.label}</b>.
          </div>
        )}
      </section>
    </div>
  );
}
